{"version":3,"sources":["constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","txn","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5da3da56.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = \"0x09aD4A89ef7965A0DD0E519f329A448f8Ce1D1c0\";\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n      setMintingCharacter(false);\n    }\n  };\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n\n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    /*\n     * Setup async function that will get the boss from our contract and sets in state\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n     * Setup logic when this event is fired off\n     */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n       * Update both player and boss Hp\n       */\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && (\n        <div id=\"toast\" className=\"show\">\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === \"attacking\" && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\nimport Arena from \"./Components/Arena\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://deadline.com/wp-content/uploads/2021/09/squid-game.png\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n      /*\n       * If there is a connected wallet and characterNFT, it's time to battle!\n       */\n    } else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} />;\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n     */\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      }\n      setIsLoading(false);\n    };\n\n    setIsLoading(false);\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\"> id game</p>\n          <p className=\"sub-text\">Ready player n?</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}